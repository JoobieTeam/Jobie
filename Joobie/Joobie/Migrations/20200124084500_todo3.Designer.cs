// <auto-generated />
using System;
using Joobie.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Joobie.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200124084500_todo3")]
    partial class todo3
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Joobie.Models.JobModels.Category", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = "Administracja biurowa"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "Doradztwo / Konsulting"
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "Badania i rozwój"
                        },
                        new
                        {
                            Id = (byte)4,
                            Name = "Bankowość"
                        },
                        new
                        {
                            Id = (byte)5,
                            Name = "BHP / Ochrona środowiska"
                        },
                        new
                        {
                            Id = (byte)6,
                            Name = "Budownictwo"
                        },
                        new
                        {
                            Id = (byte)7,
                            Name = "Call Center"
                        },
                        new
                        {
                            Id = (byte)8,
                            Name = "Edukacja / Szkolenia"
                        },
                        new
                        {
                            Id = (byte)9,
                            Name = "Finanse / Ekonomia"
                        },
                        new
                        {
                            Id = (byte)10,
                            Name = "Franczyzna / Własny biznes"
                        },
                        new
                        {
                            Id = (byte)11,
                            Name = "Hotelarstwo / Gastronomia / Turystyka"
                        },
                        new
                        {
                            Id = (byte)12,
                            Name = "Human Resources / Zasoby ludzkie"
                        },
                        new
                        {
                            Id = (byte)13,
                            Name = "Internet / e-Commerce / Nowe media"
                        },
                        new
                        {
                            Id = (byte)14,
                            Name = "Inżynieria"
                        },
                        new
                        {
                            Id = (byte)15,
                            Name = "IT - Administracja"
                        },
                        new
                        {
                            Id = (byte)16,
                            Name = "IT - Rozwój oprogramowania"
                        },
                        new
                        {
                            Id = (byte)17,
                            Name = "Łańcuch dostaw"
                        },
                        new
                        {
                            Id = (byte)18,
                            Name = "Marketing"
                        },
                        new
                        {
                            Id = (byte)19,
                            Name = "Media / Sztuka / Rozrywka"
                        },
                        new
                        {
                            Id = (byte)20,
                            Name = "Nieruchomości"
                        },
                        new
                        {
                            Id = (byte)21,
                            Name = "Obsługa klienta"
                        },
                        new
                        {
                            Id = (byte)22,
                            Name = "Praca fizyczna"
                        },
                        new
                        {
                            Id = (byte)23,
                            Name = "Prawo"
                        },
                        new
                        {
                            Id = (byte)24,
                            Name = "Produkcja"
                        },
                        new
                        {
                            Id = (byte)25,
                            Name = "Public Relations"
                        },
                        new
                        {
                            Id = (byte)26,
                            Name = "Reklama / Grafika / Kreacja / Fotografia"
                        },
                        new
                        {
                            Id = (byte)27,
                            Name = "Sektor publiczny"
                        },
                        new
                        {
                            Id = (byte)28,
                            Name = "Sprzedaż"
                        },
                        new
                        {
                            Id = (byte)29,
                            Name = "Transport / Spedycja"
                        },
                        new
                        {
                            Id = (byte)30,
                            Name = "Ubezpieczenia"
                        },
                        new
                        {
                            Id = (byte)31,
                            Name = "Zakupy"
                        },
                        new
                        {
                            Id = (byte)32,
                            Name = "Kontrola jakości"
                        },
                        new
                        {
                            Id = (byte)33,
                            Name = "Zdrowie / Uroda / Rekreacja"
                        },
                        new
                        {
                            Id = (byte)34,
                            Name = "Energetyka"
                        },
                        new
                        {
                            Id = (byte)35,
                            Name = "Inne"
                        });
                });

            modelBuilder.Entity("Joobie.Models.JobModels.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Company");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "IHS Markit"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Solvit"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Capgemini Software Solutions Center"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "EcoVadis Polska Sp. z o. o."
                        },
                        new
                        {
                            Id = 5L,
                            Name = "CBG International Sp. z o.o."
                        },
                        new
                        {
                            Id = 6L,
                            Name = "ING Tech Poland"
                        },
                        new
                        {
                            Id = 7L,
                            Name = "Ericsson"
                        },
                        new
                        {
                            Id = 8L,
                            Name = "Tronel Sp. z o.o."
                        },
                        new
                        {
                            Id = 9L,
                            Name = "PwC"
                        },
                        new
                        {
                            Id = 10L,
                            Name = "OPONEO.PL S.A."
                        },
                        new
                        {
                            Id = 11L,
                            Name = "Nokia Networks"
                        });
                });

            modelBuilder.Entity("Joobie.Models.JobModels.Job", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("CategoryId")
                        .HasColumnType("tinyint");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Localization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Salary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("TypeOfContractId")
                        .HasColumnType("tinyint");

                    b.Property<byte>("WorkingHoursId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TypeOfContractId");

                    b.HasIndex("WorkingHoursId");

                    b.ToTable("Job");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            CategoryId = (byte)16,
                            CompanyId = 1L,
                            Name = ".NET Developer",
                            TypeOfContractId = (byte)1,
                            WorkingHoursId = (byte)1
                        },
                        new
                        {
                            Id = 2L,
                            CategoryId = (byte)1,
                            CompanyId = 2L,
                            Name = "Junior .NET Developer",
                            TypeOfContractId = (byte)1,
                            WorkingHoursId = (byte)2
                        },
                        new
                        {
                            Id = 3L,
                            CategoryId = (byte)1,
                            CompanyId = 2L,
                            Name = "Senior .NET Developer",
                            TypeOfContractId = (byte)1,
                            WorkingHoursId = (byte)1
                        },
                        new
                        {
                            Id = 4L,
                            CategoryId = (byte)16,
                            CompanyId = 3L,
                            Name = "Starszy Inżynier Oprogramowania .NET",
                            TypeOfContractId = (byte)1,
                            WorkingHoursId = (byte)1
                        },
                        new
                        {
                            Id = 5L,
                            CategoryId = (byte)16,
                            CompanyId = 2L,
                            Name = "Programista .NET",
                            TypeOfContractId = (byte)1,
                            WorkingHoursId = (byte)3
                        },
                        new
                        {
                            Id = 6L,
                            CategoryId = (byte)16,
                            CompanyId = 5L,
                            Name = "C# .Net developer",
                            TypeOfContractId = (byte)3,
                            WorkingHoursId = (byte)1
                        },
                        new
                        {
                            Id = 7L,
                            CategoryId = (byte)15,
                            CompanyId = 6L,
                            Name = ".NET Developer",
                            TypeOfContractId = (byte)5,
                            WorkingHoursId = (byte)1
                        },
                        new
                        {
                            Id = 8L,
                            CategoryId = (byte)12,
                            CompanyId = 7L,
                            Name = ".NET Developer",
                            TypeOfContractId = (byte)3,
                            WorkingHoursId = (byte)1
                        },
                        new
                        {
                            Id = 9L,
                            CategoryId = (byte)13,
                            CompanyId = 8L,
                            Name = "Software Engineer C#",
                            TypeOfContractId = (byte)3,
                            WorkingHoursId = (byte)3
                        },
                        new
                        {
                            Id = 10L,
                            CategoryId = (byte)11,
                            CompanyId = 7L,
                            Name = "Quality Assurance",
                            TypeOfContractId = (byte)1,
                            WorkingHoursId = (byte)3
                        },
                        new
                        {
                            Id = 11L,
                            CategoryId = (byte)15,
                            CompanyId = 9L,
                            Name = "Programista .NET",
                            TypeOfContractId = (byte)5,
                            WorkingHoursId = (byte)1
                        },
                        new
                        {
                            Id = 12L,
                            CategoryId = (byte)16,
                            CompanyId = 10L,
                            Name = "Junior .NET Developer",
                            TypeOfContractId = (byte)5,
                            WorkingHoursId = (byte)2
                        },
                        new
                        {
                            Id = 13L,
                            CategoryId = (byte)16,
                            CompanyId = 11L,
                            Name = "Azure DevOps",
                            TypeOfContractId = (byte)1,
                            WorkingHoursId = (byte)3
                        });
                });

            modelBuilder.Entity("Joobie.Models.JobModels.TypeOfContract", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeOfContract");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = "Umowa o pracę"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "Umowa o dzieło"
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "Umowa zlecenie"
                        },
                        new
                        {
                            Id = (byte)5,
                            Name = "Kontrakt B2B"
                        },
                        new
                        {
                            Id = (byte)6,
                            Name = "Umowa na zastępstwo"
                        },
                        new
                        {
                            Id = (byte)7,
                            Name = "Umowa agencyjna"
                        });
                });

            modelBuilder.Entity("Joobie.Models.JobModels.WorkingHours", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("WorkingHours");

                    b.HasData(
                        new
                        {
                            Id = (byte)1,
                            Name = "Pełny etat"
                        },
                        new
                        {
                            Id = (byte)2,
                            Name = "Część etatu"
                        },
                        new
                        {
                            Id = (byte)3,
                            Name = "Tymczasowa"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Joobie.Models.JobModels.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Joobie.Models.JobModels.Company", b =>
                {
                    b.HasOne("Joobie.Models.JobModels.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Joobie.Models.JobModels.Job", b =>
                {
                    b.HasOne("Joobie.Models.JobModels.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Joobie.Models.JobModels.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Joobie.Models.JobModels.TypeOfContract", "TypeOfContract")
                        .WithMany()
                        .HasForeignKey("TypeOfContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Joobie.Models.JobModels.WorkingHours", "WorkingHours")
                        .WithMany()
                        .HasForeignKey("WorkingHoursId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
